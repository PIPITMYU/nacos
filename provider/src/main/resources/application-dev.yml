#开发环境
log:
  level: INFO
server:
  port: 8999
  servlet:
    context-path: /demo
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.1.77:3306/lzy?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
  redis:
#    redisson:
#      # fixme config的配置最好去对应的实体类看下有没有这个属性，和网上直接找的会有一些出入
#      file: classpath:/redisson/SingleRedisson.yaml
    host: 192.168.1.77
    port: 6379
    password: lzy
  super:
    scheduled:
      thread-pool:
        #线程池大小
        poolSize: 30
        #线程名前缀
        threadNamePrefix: super
        #设置是否关闭时等待执行中的任务执行完成
        waitForTasksToCompleteOnShutdown: false
        #设置此执行器被关闭时等待的最长时间，用于在其余容器继续关闭之前等待剩余任务执行完成
        #需要将waitForTasksToCompleteOnShutdown设置为true，此配置才起作用
        awaitTerminationSeconds: 0
      plug-in:
        #开启执行标志
        executionFlag: true
        #开启定时任务调度日志，日志文件是存在本地磁盘上的
        executionLog: true
        #日志存放位置，不设置默认位置为程序同级目录下
        logPath: E:/tmp/log-scheduled
        #开启基于zookeeper的集群模式
        colony: false
        #zookeeper集群模式的定时任务服务名，相同名称的定时任务名称服务会被统一管理
        colonyName: test
#      zookeeper:
#        #设置zookeeper地址，zookeeper集群多个地址用英文逗号隔开
#        url: 127.0.0.1:2181
#        #设置zookeeper session超时时间
#        sessionTimeout: 60000
#        #设置zookeeper连接超时时间
#        connectionTimeout :60000
mybatis-plus:
  #  classpath:/com/*/*/mapper/*Mapper.xml 放在resources目录下classpath:/mapper/**.xml
  mapper-locations: classpath:/mapper/**.xml
#  type-aliases-package: com.example.demo.domain
#  configuration:
#  开启这个的作用是可以让数据库中的id与pojo中的id对应
#  map-underscore-to-camel-case: true
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
logging:
  config: classpath:logback-spring.xml
tokenConfig:
  open: false
path:
  desktop: C:\Users\84428\Desktop\

#参数间的引用
com:
  example:
    name: lzy
    title: spring boot
    desc: ${com.example.name}正在努⼒写《${com.example.title}》
    #使用随机数
    #随机字符串
    value: ${random.value}
    #随机int
    number: ${random.int}
    #随机long
    bignumber: ${random.long}
    #10以内的随机数
    test1: ${random.int(10)}
    #10-20的随机数
    test2: ${random.int[10,20]}